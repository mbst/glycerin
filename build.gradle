plugins {
    id "org.sonarqube" version "1.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.7

group 'com.metabroadcast.atlas.glycerin'
version = '2.1.4'

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

configurations {
    xjc
    queriesCompile
}

repositories {
    mavenCentral()
    maven {
        name 'Metabroadcast'
        url 'http://mvn.metabroadcast.com/all'
    }
}

dependencies {

    compile 'com.sun.codemodel:codemodel:2.6'
    compile 'com.google.guava:guava:16.0'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'joda-time:joda-time:2.3'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'com.google.http-client:google-http-client:1.17.0-rc'
    compile 'com.google.http-client:google-http-client-xml:1.17.0-rc'

    testCompile('org.testng:testng:6.8.5') { exclude group: 'junit' }
    testCompile 'junit:junit:4.11'
    testCompile('org.mockito:mockito-core:1.9.5') { exclude group: 'org.hamcrest' }
    testCompile 'org.slf4j:slf4j-log4j12:1.7.5'

    xjc 'com.sun.xml.bind:jaxb-core:2.2.11'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.11'
    xjc 'com.sun.xml.bind:jaxb-impl:2.2.11'

    queriesCompile 'com.sun.codemodel:codemodel:2.6'
    queriesCompile 'org.slf4j:slf4j-log4j12:1.7.5'

    archives 'org.apache.maven.wagon:wagon-webdav:1.0-beta-2'
}

def generatedSourcesDirName = "generated-sources"
def generatedSourcesPath = "${project.buildDir}/${generatedSourcesDirName}"
def generatedXsdDir = "${project.buildDir}/generated-schema"
def generatedQueriesPkg = "com.metabroadcast.atlas.glycerin.queries"
def generatedXmlModelPkg = "com.metabroadcast.atlas.glycerin.model"
def generatedSourcesDir = file(generatedSourcesPath)
def generatedXmlModelDir = new File(generatedSourcesDir, generatedXmlModelPkg.replace('.', '/'))
def generatedQueriesDir = new File(generatedSourcesDir, generatedQueriesPkg.replace('.', '/'))

// TODO: would be nice to have coverage, but we only have integration tests for this
/*
  TODO: the exclusions are done this way because it needs to be a pattern;
  using ${generatedSourcesPath} would make an absolute path, which would be different on the server
*/
sonarqube {
    properties {
        property "sonar.exclusions", "**/${generatedSourcesDirName}/**/*"
    }
}

task createGeneratedSourcesDir {
    outputs.dir generatedSourcesDir
    doLast { project.mkdir(generatedSourcesPath) }
}

task createGeneratedXsdDir {
    outputs.dir generatedXsdDir
    doLast { project.mkdir(generatedXsdDir) }
}
// TODO when you do ./gradlew --daemon clean build the build fails, need to fix this.
task transformSchema(dependsOn: createGeneratedXsdDir) {
    ant.xslt(in: 'src/main/resources/nitro-schema.xsd',
            style: 'src/main/resources/nitro-schema.xsl',
            out: "${generatedXsdDir}/nitro-schema.xsd")

}

task generateXmlSource(dependsOn: ['transformSchema', 'createGeneratedSourcesDir']) {
    inputs.files fileTree(dir: generatedXsdDir, include: '**/*.xsd')
    outputs.dir generatedXmlModelDir
    doLast {
        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)
        ant.xjc(destdir: generatedSourcesPath, package: generatedXmlModelPkg, extension: 'true') {
            schema(dir: new File("${generatedXsdDir}"), includes: '**/*.xsd')
        }
    }
}

task fetchApiDescription {
    doLast {
        ant.get(
            src: "http://programmes.api.bbc.com/nitro/api?api_key="+System.properties['nitro.apikey'],
            dest: new File('src/main/resources')
        ) {
            mapper(type: "regexp", from: ".*api\\?.*", to: "api.xml")
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    generatedSourcesPath
            ]
        }
    }
    queries {
        java { srcDirs = ['src/queries/java'] }
    }
}

compileQueriesJava.classpath = compileJava.classpath + compileQueriesJava.classpath
compileQueriesJava.source sourceSets.queries.allJava, generatedXmlModelDir,
        sourceSets.main.allJava.asFileTree.matching {
            include '**/GlycerinResponse.java'
            include '**/GlycerinException.java'
            include '**/GlycerinQuery.java'
            include '**/model/*.java'
            include '**/queries/*.java'
        }
compileQueriesJava.dependsOn generateXmlSource

task generateQueries(type: JavaExec, dependsOn: compileQueriesJava) {
    ext.descriptor = sourceSets.main.resources.asFileTree.matching { include '**/api.xml' }.asPath
    inputs.file file(ext.descriptor)
    outputs.dir generatedQueriesDir
    classpath sourceSets.queries.output, configurations.compile, configurations.queriesCompile
    args generatedSourcesPath, ext.descriptor, generatedQueriesPkg, generatedXmlModelPkg
    main 'com.metabroadcast.atlas.glycerin.generator.QueryGenerator'
}

compileJava.dependsOn generateQueries
compileJava.source sourceSets.main.allJava, sourceSets.queries.allJava, generatedSourcesPath

test {
    useTestNG() { excludeGroups 'integration' }
    testLogging { events "passed", "failed", "skipped" }
}

task integrationTest(type: Test, dependsOn: 'test') {
    useTestNG() { includeGroups 'integration' }
    testLogging { events "passed", "failed", "skipped" }
    systemProperty "nitro.host", System.properties['nitro.host']
    systemProperty "nitro.apikey", System.properties['nitro.apikey']
}
integrationTest.doFirst {
    if (System.properties['nitro.host'] == null) {
        logger.warn("'nitro.host' required")
        throw new StopExecutionException()
    }
    if (System.properties['nitro.apikey'] == null) {
        logger.warn("'nitro.apikey' required to run integration tests")
        throw new StopExecutionException()
    }
}

jar {
    baseName 'glycerin'
    exclude('**/generator/**')
    manifest {
        attributes 'Implementation-Title': 'Glycerin', 'Implementation-Version': version
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava, sourceSets.queries.allJava
    exclude('**/generator/**')
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir, sourceSets.queries.allJava
    exclude('**/generator/**')
    classifier = 'javadoc'
}

artifacts { archives sourceJar, javadocJar }

//Get maven repo credentials - TODO just provide these as system properties?
def getMavenSettingsCredentials = {
    String userHome = System.getProperty("user.home");
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()
    for (entry in entries) {
        if (entry."id".text() == "metabroadcast-mvn") {
            return [username: entry.username.text(), password: entry.password.text()]
        }
    }
}

uploadArchives {
    def creds = getCredentials()
    repositories.mavenDeployer {
        configuration = configurations.archives
        repository(url: "dav:http://mvn.metabroadcast.com:80/public-releases-local") {
            authentication(userName: creds["username"], password: creds["password"])
        }
    }
}
